# Chapter 11 Dictionaries > Think python

'''
A dictionary is like a list but its indices
can be almost any kind.
Dinctionaries have a collection of indeces called
"Key" and eahc one is associated with a single value
called "The key-value pair or Item"
'''
# A dictionary is a mapping
eng2sp = {
    'one': 'uno',
    'two': 'dos',
    'three': 'tres'
}

# Sometimes the order of dictionaries
# is unpredictable
print(eng2sp)
print(eng2sp['two'])
len(eng2sp)
# Look for in the "Key" of the dictionary
print('one' in eng2sp)
print('uno' in eng2sp)

# It'll look at the values
vals = eng2sp.values()
print('uno' in vals)

# Dictionary as a collection
def histogram(s):
    d = dict()
    for c in s:
        if c not in d:
            d[c] = 1
        else:
            d[c] += 1
    return d

h = histogram('brontosaurus')
print(h)

h = histogram('a')
print(h)
print(h.get('a', 0))
print(h.get('a', 0))

# Looping & dictionaries

def print_hist(h):
    for c in h:
        print(c, h[c])

h = histogram('parrot')
print_hist(h)

for key in sorted(h):
    print(key, h[key])

# Reverse lookup

def reverse_lookup(d, v):
    for k in d:
        if d[k] == v:
            return k
    raise LookupError()


h = histogram('parrot')
k = reverse_lookup(h, 2)
print(k)

# Dictionaries & list

def invert_dict(d):
    inverse = dict()
    for key in d:
        val = d[key]
        if val not in inverse:
            inverse[val] = [key]
        else:
            inverse[val].append(key)
    return inverse

hist = histogram('parrot')
print(hist)

inverse = invert_dict(hist)
print(inverse)

t = [1, 2, 3]
d = dict()
'''
a hash is a function that takes a value and
returns an integer
'''
# d[t] = 'oops'

# Memos

know = {0:0, 1:1}

def fibonacci(n):
    if n in know:
        return know[n]

    res = fibonacci(n - 1) + fibonacci(n - 2)
    know[n] = res
    return res


print(fibonacci(3))

# Global variables 
verbose = True

def example1():
    if verbose:
        print('Running example1')

# Global variable
been_called = False

def example2():
    # This is a local variable
    been_called = True


def example2():
    #Called the global variable within the function
    global been_called
    been_called = True

'''
count = 0
def example3():
    count = count + 1
'''

known = {0:0, 1:1}

def example4():
    known[2] = 1


def example5():
    global known
    known = dict()


# Exercises 

# 11-2
def invert_dict(d):
    """Inverts a dictionary, returning a map from val to a list of keys.
    If the mapping key->val appears in d, then in the new dictionary
    val maps to a list that includes key.
    d: dict
    Returns: dict
    """
    inverse = {}
    for key in d:
        val = d[key]
        inverse.setdefault(val, []).append(key)
    return inverse


if __name__ == '__main__':
    d = dict(a=1, b=2, c=3, z=1)
    inverse = invert_dict(d)
    for val in inverse:
        keys = inverse[val]
        print(val, keys)
# 11-3

'''
def ackermann(m, n):
    """Computes the Ackermann function A(m, n)
    See http://en.wikipedia.org/wiki/Ackermann_function
    n, m: non-negative integers
    """
    if m == 0:
        return n+1
    if n == 0:
        return ackermann(m-1, 1)

    if (m, n) in cache:
        return cache[m, n]
    else:
        cache[m, n] = ackermann(m-1, ackermann(m, n-1))
        return cache[m, n]


print(ackermann(3, 4))
print(ackermann(3, 6))
'''

# 11-4
def has_duplicates(t):
    """Checks whether any element appears more than once in a sequence.
    Simple version using a for loop.
    t: sequence
    """
    d = {}
    for x in t:
        if x in d:
            return True
        d[x] = True
    return False


def has_duplicates2(t):
    """Checks whether any element appears more than once in a sequence.
    Faster version using a set.
    t: sequence
    """
    return len(set(t)) < len(t)


if __name__ == '__main__':
    t = [1, 2, 3]
    print(has_duplicates(t))
    t.append(1)
    print(has_duplicates(t))

    t = [1, 2, 3]
    print(has_duplicates2(t))
    t.append(1)
    print(has_duplicates2(t))
# 11-5
'''
def make_word_dict():
    """Read the words in words.txt and return a dictionary
    that contains the words as keys"""
    d = dict()
    fin = open('words.txt')
    for line in fin:
        word = line.strip().lower()
        d[word] = None

    return d


def rotate_pairs(word, word_dict):
    """Prints all words that can be generated by rotating word.
    word: string
    word_dict: dictionary with words as keys
    """
    for i in range(1, 14):
        rotated = rotate_word(word, i)
        if rotated in word_dict:
            print(word, i, rotated)


if __name__ == '__main__':
    word_dict = make_word_dict()

    for word in word_dict:
        rotate_pairs(word, word_dict)
'''

# 11-7

'''
def make_word_dict():
    """Read. the words in words.txt and return a dictionary
    that contains the words as keys."""
    d = dict()
    fin = open('words.txt')
    for line in fin:
        word = line.strip().lower()
        d[word] = word

    return d


def homophones(a, b, phonetic):
    """Checks if words two can be pronounced the same way.
    If either word is not in the pronouncing dictionary, return False
    a, b: strings
    phonetic: map from words to pronunciation codes
    """
    if a not in phonetic or b not in phonetic:
        return False

    return phonetic[a] == phonetic[b]


def check_word(word, word_dict, phonetic):
    """Checks to see if the word has the following property:
    removing the first letter yields a word with the same
    pronunciation, and removing the second letter yields a word
    with the same pronunciation.
    word: string
    word_dict: dictionary with words as keys
    phonetic: map from words to pronunciation codes
    """
    word1 = word[1:] 
    if word1 not in word_dict:
        return False
    if not homophones(word, word1, phonetic):
        return False

    word2 = word[0] + word[2:]
    if word2 not in word_dict:
        return False
    if not homophones(word, word2, phonetic):
        return False

    return True


if __name__ == '__main__':
    phonetic = read_dictionary()
    word_dict = make_word_dict()

    for word in word_dict:
        if check_word(word, word_dict, phonetic):
            print(word, word[1:], word[0] + word[2:])

'''


            





















































